// 13장 스코프

// 👉 13.1 스코프란?
// 스코프(scope 유효범위)
// 우리는 스코프를 이미 경험했다.
// 함수의 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수 없다. 
// 이것은 매개변수를 참조할 수 있는 유효범위 (= 매개변수의 스코프)가 함수 몸체 내부로 한정되기 때문이다.
function add(x, y) {
  // 매개변수 x, y는 함수add 몸체 내부에서만 참조할 수 있다.
  console.log(x, y); // 1 2
  return x + y;
}
add(1, 2);
// console.log(x, y); // ReferenceError: x is not defined

// 변수는 코드의 가장 바깥 영억뿐 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다.

var var1 = 1; // 코드의 가장 바깥 영역에서 선언한 변수

if(true) {
  var var2 = 2; // 코드 블록 내에서 선언한 변수
  if(true) {
    var var3 = 3; // 중첩된 코드 블록 내에서 선언한 변수
  }
}

function foo() {
  var var4 = 4; // 함수 내에서 선언한 변수
  function bar() {
    var var5 = 5; // 중첩된 함수 내에서 선언한 변수
  }
}

console.log(var1); // 1
console.log(var2); // 2
console.log(var3); // 3
// console.log(var4); // ReferenceError: var4 is not defined
// console.log(var5); // ReferenceError: var5 is not defined

// 변수는 자신이 선언된 위치에 의해 자신이 유효한 범위(= 다른 코드가 변수 자신을 참조할 수 있는 범위)가 결정된다.
// 변수뿐만 아니라 모든 식별자가 그렇다.

// 모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다.
// 이를 스코프라 한다.
// 스코프 = 식별자가 유효한 범위

var x = 'global';
function foo() {
  var x = 'local';
  console.log(x); // local
}
foo();
console.log(x); // global

// 자바스크립트 엔진은 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정해야한다. 
// 이를 식별자 결정(identifier resolution)이라 한다. 
// 자바스크립트 엔진은 스코프를통해 어떤 변수를 참조해야 할 것인지 결정한다.
// 스코프란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다.

// 자바스크립트 엔진은 코드를 실행할 때 코드의 문맥(context)를 고려한다.
// 렉시컬 환경(lexical environment): 코드가 어디서 실행되며 주변에 어떤 코드가 있는지
// 코드의 문맥은 렉시컬 환경으로 이뤄진다.
// 이를 구현한 것이 "실행 컨텍스트(execution context)"이며, 모든 코드는 실행 컨텍스트에서 평가되고 실행된다.

// 식별자는 어떤 값을 구별할 수 있어야 하므로 유일unique해야 한다.
// 따라서 식별자인 변수 이름은 중복될 수 없다.
// 하나의 값은 유일한 식별자에 연결name binding되어야 한다.

// 프로그래밍 언어에서는 스코프(유효 범위)를 통해 식별자인 변수 이름의 충돌을 방지하여 같은 이름의 변수를 사용할 수 있게 한다.
// 스코프 내에서 식별자는 유일해야 하지만 다른 스코프에는 같은 이름의 식별자를 사용할 수 있다.
// 즉, 스코프는 네임스페이스다.

// var 키워드로 선언한 변수의 중복 선언
// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다.
// 이는 의도치 않게 변수값이 재할당되어 변경되는 부작요을 발생시킨다.
function foo() {
  var x = 1;
  var x = 2;
  console.log(x); // 2
}
foo();

// 하지만 let이나 const 키워드로 선언된 변수는 같은 스코프 내 중복 선언을 허용하지 않는다.
function bar() {
  let x = 1;
  // let x = 2; // SyntaxError: Identifier 'x' has already been declared
}

// 👉 13.2 스코프의 종류
// 코드는 전역(global)과 지역(local)로 나뉜다

// 구분           설명            스코프        변수
// 전역     코드의 가장 바깥 영역   전역 스코프     전역 변수
// 지역       함수 몸체 내부      지역 스코프     지역 변수

// 변수는 자신이 선언된 위치(전역 또는 지역)에 의해 자신이 유효한 범위인 스코프가 결정된다.
// 전역에서 선언된 변수는 전역 스코프를 갖는 전역 변수
// 지역에서 선언된 변수는 지역 스코프를 갖는 지역 변수

// 📌 13.2.1 전역과 전역 스코프
// 전역이란 코드의 가장 바깥 영역
// 전역은 전역 스코프를 만든다
// 전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수(global variable)가 된다. 
// 전역 변수는 어디서든지 참조할 수 있다.

var x = 'global x';
var y = 'global y';

function outer() {
  var z = "outer's local z";

  console.log(x); // 1) global x
  console.log(y); // 2) global y
  console.log(z); // 3) outer's local z

  function inner() {
    var x = "inner's local x";

    console.log(x); // 4) inner's local x
    console.log(y); // 5) global y
    console.log(z); // 6) outer's local z
  }

  inner();
}

outer();

console.log(x); // 7) global x
// console.log(z); // ReferenceError: z is not defined

// 📌 13.2.2 지역과 지역 스코프
// 지역이란 함수 몸체 내부
// 지역은 지역 스코프를 만든다
// 지역에 변수를 선언하면 지역 스코프를 갖는 지역 변수가 된다
// 지역 변수는 자신이 선언된 지역과 하위 지역(중첩 함수)에서만 참조할 수 있다.
// = 지역 벼눗는 자신의 지역 스코프와 하위 지역 스코프에서만 유효하다.

// inner 함수 내부에서 선언된 x 변수 이외에 이름이 같은 전역 변수x가 존재한다.
// 이때 inner 함수 내부에서 x 변수를 참조하면 전역 변수 x를 참조하는 것이 아니라 inner 함수 내부에서 선언된 x변수를 참조한다.
// 이는 자바스크립트 엔진이 스코프 체인을 통해 참조할 변수를 검색(identifer resolution)했기 때문이다.

// 👉 13.3 스코프 체인
// 함수는 전역에서 정의할 수 있고 함수 몸체 내부에서 정의할 수도 있다. 
// 함수 몸체 내부에서 함수가 정의된 것을 "함수의 중첩"
// 함수 몸에 내부에서 정의된 함수를 "중첩 함수"
// 중첩 함수를 포함하는 함수를 "외부 함수"라고 한다

// 함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다.
// 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다.
// = 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적 구조를 갖는다.
// 외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라 한다.

// outer 함수의 지역과 inner 함수의 지역이 있다.
// inner 함수는 outer 함수의 중첩 함수다.
// outer 함수가 만든 지역 스코프는 inner 함수가 만든 지역 스코프의 상위 스코프다.
// outer 함수의 지역 스코프의 상위 스코프는 전역 스코프다

// 전역 스코프
// x 'global x'
// y 'global y'
// outer <function objct>
// ^
// |
// outer 지역 스코프
// z 'outer's local z'
// inner <function object>
// ^
// |
// inner 지역 스코프
// x 'inner's local x'

// 이처럼 모든 스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프다.
// 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인(scope chain)이라 한다.

// 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여
// 상위 스코프 방향으로 이동하여 선언된 변수를 검색(identifier resolution)한다.
// 이를 통해 상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 있다.

// 스코프 체인은 물리적인 실체로 존재한다.
// 자바스크립트 엔진은 코드를 실행하기에 앞서 위 그림과 유사한 자료구조인 렉시컬 환경을 실제로 생성한다.
// 변수 선언이 실행되면 변수 식별자가 이 자료구조(렉시컬 환경)에 키key로 등록되고, 변수 할ㄹ당이 일어나면 이 자료구조의 변수 식별자에 해당하는 값을 변경한다.
// 변수의 검색도 이 자료구조 상에서 이뤄진다.

// 📌 13.3.1 스코프 체인에 의한 변수 검색
// 📌 13.3.2 스코프 체인에 의한 함수 검색
// 👉 13.4 함수 레벨 스코프
// 👉 13.5 렉시컬 스코프

