// 43장 Ajax

// 👉 Ajax란?

// Ajax(Asynchronous JavaScript and XML)란 자바스크립트를 사용하여 브라우저가 서버에게 비동기 방식으로 데이터를 요청하고, 서버가 응답한 데이터를
// 수신하여 웹페이지를 동적으로 갱신하는 프로그래밍 방식을 말한다.
// Ajax는 브라우저에게 제공하는 Web API인 XMLHttpRequest 객체를 기반으로 동작한다.
// XMLHttpRequest는 HTTP 비동기 통신을 위한 메서드와 프로퍼티를 제공한다.

// 1999년 마이크로소프트가 개발한 XMLHttpRequest는 그다지 큰 주목을 받지 못하다가 2005년 구글이 발표한 구글 맵스를 통해 웹 애플리케이션 개발
// 프로그래밍 언어로서 자바스크립트의 가능성을 확인하는 계기를 마련했다.
// 웹 브라우저에서 자바스크립트와 Ajax를 기반으로 동작하는 구글 맵스가 데스크톱 애플리케이션과 비교해 손색이 없을 정도로 퍼포먼스와 부드러운 화면 전환 효과를
// 보여준 것이다.

// 이전의 웹페이지는 html 태그로 시작해서 html 태그로 끝나는 완전한 HTML을 서버로부터 전송받아 웹페이지 전체를 다시 렌더링하는 방식으로 동작했다.
// 따라서 화면이 전환되면 서버로부터 새로운 HTML을 전송받아 웹페이지 전체를 처음부터 다시 렌더링했다.

// 이러한 전통적인 방식은 다음과 같은 단점이 있다.
// 1. 이전 웹페이지와 차이가 없어서 변경할 필요가 없는 부분까지 포함된 완전한 HTML을 서버로부터 매번 다시 전송받기 때문에 불필요한 데이터 통신이 발생한다.
// 2. 변경할 필요가 없는 부분까지 처음부터 다시 렌더링한다. 이로 인해 화면 전환이 일어나면 화면이 순간적으로 깜박이는 현상이 발생한다.
// 3. 클라이언트와 서버와의 통신이 동기 방식으로 동작하기 때문에 서버로부터 응답이 있을때까지 다음 처리는 블로킹된다.

// Ajax의 등장은 이전의 전ㅌ오적인 패러다임을 획기적으로 전환했다.
// 즉, 서버로부터 웹페이지의 변경에 필요한 데이터만 비동기 방식으로 전송받아 웹페이지를 변경할 필요가 없는 부분은 다시 렌더링하지 않고, 변경할 필요가 있는
// 부분만 한정적으로 렌더링하는 방식이 가능해진 것이다.
// 이를 통해 브라우저에서도 데스크톱 애플리케이션과 유사한 빠른 퍼포먼스와 부드러운 화면 전환이 가능해졌다.

// Ajax는 전통적인 방식과 비교했을 때 다음과 같은 장점이 있다.
// 1. 변경할 부분을 갱신하는 데 필요한 데이터만 서버로부터 전송받기 때문에 불필요한 데이터 통신이 발생하지 않는다.
// 2. 변경할 필요가 없는 부분은 다시 렌더링하지 않는다. 따라서 화면이 순간적으로 깜박이는 현상이 발생하지 않는다.
// 3. 클라이언트와 서버와의 통신이 비동기 방식으로 동작하기 때문에 서버에게 요청을 보낸 이후 블로킹이 발생하지 않는다.


// 👉 JSON
// ❗️ JSON(Javascript Object Notation)은 크라이언트와 서버 간의 HTTP 통신을 위한 텍스트 데이터 포맷이다.
// ❗️ 자바스크립트에 종속되지 않는 언어 독립형 데이터 포맷으로, 대부분의 프로그래밍 언어에서 사용할 수 있다.

// 📌 JSON 표기 방식
// ❗️ JSON은 자바스크립트의 객체 리터럴과 유사하게 키와 값으로 구성된 순수한 텍스트다.
{
    "name": "Lee",
    "age": 20,
    "alive": true,
    "hobby": ["traveling", "tennis"]
}

// ❗️ JSNO의 키는 반드시 큰따옴표(작은따옴표 사용 불가)로 묶어야 한다.
// ❗ ️값은 객체 리터럴과 같은 표기버을 그대로 사용할 수 있다.
// ❗️ 하지만 문자열은 반드시 큰 따옴표(작은따옴표 사용 불가)로 묶어야 한다.

// 📌 JSON.stringify
// 📌 JSON.parse
// 👉 XMLHttpRequest
// 📌 XMLHttpRequest 객체 생성
// 📌 XMLHttpRequest 객체의 프로퍼티와 메서드
// 🌷 XMLHttpRequest 객체의 프로토타입 프로퍼티
// 🌷 XMLHttpRequest 객체의 이벤트 핸들러 프로퍼티
// 🌷 XMLHttpRequest 객체의 메서드
// 🌷 XMLHttpRequest 객체의 정적 프로퍼티
// 📌 HTTP 요청 전송
// 🌷 XMLHttpRequest.prototype.open
// 🌷 XMLHttpRequest.prototype.send
// 🌷 XMLHttpRequest.prototype.setRequestHeader
// 📌 HTTP 응답 처리
