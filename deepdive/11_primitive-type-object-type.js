// 11장 원시 값과 객체의 비교 

// 자바스크립트가 제공하는 7가지 데이터 타입은 크게 원시 타입(primitive type)과 객체 타입(object type)으로 나뉜다.

// 두 타입은 크게 세 가지 측면에서 다르다.
// 1. 원시 타입의 값은 변경 불가능한 값(immutable value)이다.
// 이에 반해 객체(참조) 타입의 값은 변경 가능한 값(mutable value)이다.
// 2. 원시 값을 변수(확보된 메모리 공간)에 할당하면 변수에는 실제 값이 저장된다.
// 객체를 변수에 할당하면 변수(..)에는 참조 값이 저장된다. 
// 3. 원시 값을 닺는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달된다. = 값에 의한 전달(pass by value)
// 객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달된다. = 참조에 의한 전달(pass by reference)


// 👉 11.1 원시 값
// 📌 11.1.1 변경 불가능한 값
// 원시 타입의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이다.
// 즉 한번 생성된 원시 값은 읽기 전용(read only)값으로서 변경할 수 없다.

// 값을 변경할 수 없다는게 무슨 뜻일까?
// 먼저 변수와 값은 구분해서 생각해야 한다.
// 변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙은 이름이다.
// 값은 변수에 저장된 데이터로서 표현식이 평가되어 생성된 결과를 말한다.
// 변경 불가능하다는 것은 변수가 아니라 값에 대한 진술이다. 
// '원시 값은 변경 불가능하다'라는 말은 원시 값 자체를 변경할 수 없다는 말이지, 변수 값을 변경할 수 없다는 말이 아니다.


// const 키워드를 사용해 선언한 변수는 재할당이 금지된다.
const o = {};
console.log(o); // {}

// const 키워드를 사용해 선언한 변수에 할당한 원시 값은 변경할 수 없다.
// 하지만 .. 할당한 객체는 변경할 수 있다.
o.a = 1;
console.log(o); // {a: 1}


// 원시 값은 어떤 일이 있어도 불변하다.
// 이러한 원시 값의 특성은 데이터의 신뢰성을 보장한다.

// 원시 값을 할당한 변수에 새로운 원시 값을 재할당하면 메모리 공간에 저장되어 있는 재할당 이전의 원시 값을 변경하는 것이 아니라! 
// 새로운 메모리 공간을 확보하고 재할당한 원시 값을 저장한 후, 변수는 새롭게 재할당한 원시 값을 가리킨다. 
// 변수가 참조하던 메모리 공간의 주소가 변경된 이유는 변수에 할당된 원시 값이 변경 불가능한 값이기 때문이다.
// 값의 이러한 특성을 불변성(immutability)이라 한다.

// 불변성을 갖는 원시 값을 할당한 변수는 재할당 이외에 변수 값을 변경할 수 있는 방법이 없다. 

// 📌 11.1.2 문자열과 불변성
// 원시 값을 저장하려면 먼저 확보해야 하는 메모리 공간의 크기를 결정해야 한다.
// 이를 위해 원시 타입별로 메모리 공간의 크기가 미리 정해져 있다. 
// 원시 값인 문자열은 0개 이상의 문자(character)로 이뤄진 집합을 말한다. 
// 1개의 문자는 2바이트의 메모리 공간에 저장된다. 따라서 문자열은 몇 개의 문자로 이뤄졌느냐에 따라 필요한 메모리 공간의 크기가 결정된다.

var str1 = ''; // 0개의 문자로 이뤄진 문자열(빈 문자열)
var str2 = 'Hello'; // 5개의 문자로 이뤄진 문자열


// 자바스크립트의 문자열은 원시 타입이며, 변경 불가능하다. 
// 이것은 자바스크립트의 장점 중 하나다.
var str = 'Hello';
str = 'world';
// 문자열 'Hello'와 'world'는 모두 메모리에 존재한다.
// 식별자 str은 문자열 'Hello'를 가리키고 있다가 문자열 'world'를 가리키도록 변경되었을 뿐이다.

// 문자열은 유사 배열 객체이면서 이터러블이므로 배열과 유사하게 각 문자에 접근할 수 있다.

// 유사 배열 객체 (array-like object)
// 유사 배열 객체란 마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다.
var str = 'apple';
// 문자열은 유사 배열 객체이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.
console.log(str[0]); // a
// 원시 값인 문자열이 객체처럼 동작한다.
console.log(str.length); // 5
console.log(str.toUpperCase()); // APPLE

console.log(str); // apple
// 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.
// 하지만 문자열은 원시 값이므로 변경할 수 없다. 
// 이때 에러가 발생하지 않는다!
str[0] = 'A';
console.log(str); // apple

// 📌 11.1.3 값에 의한 전달
var score = 80;
var copy = score;

console.log(score); // 80
console.log(copy); // 80
console.log(score === copy); // true

// 변수 score과 copy의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.
// 따라서 score의 값을 변경해도 copy의 값에는 어떠한 영향도 주지 않는다.
score = 100;

console.log(score); // 100
console.log(copy); // ?? 내 예상은 100이었는데 80이다
console.log(score === copy); // false

// "값에 의한 전달"이라는 용어는 자바스크립트를 위한 용어가 아니므로 사실 오해가 있을 수도 있다.
// 엄격하게 표현하면 변수에는 값이 전달되는 것이 아니라 메모리 주소가 전달되기 때문이다.
// 이는 변수와 같은 식별자는 값이 아니라 메모리 주소를 기억하고 있기 때문이다

// 식별자는 어떤 값을 구별해서 식별해낼 수 있는 이름.
// 값은 메모리에 저장되어 있다
// -> 변수와 같은 식별자는 값이 아니라 메모리 주소를 기억하고 있다
// = 식별자는 메모리 주소에 붙인 이름

// "값에 의한 전달"도 사실은 값을 전달하는 것이 아니라 메모리 주소를 전달한다. 
// 단, 전달된 메모리 주소를 통해 메모리 공간에 접근하면 값을 참조할 수 있다. 

// 중요한 것은 변수에 원시 값을 갖는 변수를 할당하면
// 변수 할당 시점이든, 두 변수 중 어느 하나의 변수에 값을 재할당하는 시점이든
// 결국은 두 변수의 원시 값은 서로 다른 메모리 공간에 저장된 별개의 값이 되어 
// 어느 한쪽에서 재할당을 통해 값을 변경하더라도 서로 간섭할 수 없다는 것이다.

// 👉 11.2 객체
// 객체는 프로퍼티의 개수가 정해져 있지 않으며, 동적으로 추가되고 삭제할 수 있다
// 또한 프로퍼티 값에도 제약이 없다. 
// 따라서 객체는 원시 값과 같이 확보해야 할 메모리 공간의 크기를 사전에 정해둘 수 없다.

// 📌 11.2.1 변경 가능한 값
// 객체(참조) 타입의 값, 즉 객체는 변경 가능한 값(mutable value)이다.
// 객체를 할당한 변수가 기억하는 메모리 주소를 통해 메모리 공간에 접근하면 참조 값(reference value)에 접근할 수 있다.
// 참조 값은 생성된 객체가 저장된 메모리 공간의 주소 그 자체다.
// 변수는 참조 값을 통해 객체에 접근할 수 있다.

// 할당이 이뤄지는 시점에 객체 리터럴이 해석되고, 그 결과 객체가 생성된다.
var person = {
  name: 'Lee'
};
// person 변수에 저장되어 있는 참조 값으로 실제 객체에 접근한다
console.log(person); // {name: 'Lee'}

// 일반적으로 원시 값은 할당한 변수의 경우 "변수는 *값을 갖는다" 또는 "변수의 값은 *다"라고 표현한다
// 하지만 객체를 할당한 변수의 경우 "변수는 객체를 참조하고 있다" 또는 "변수는 객체를 가리키고(point) 있다"라고 표현한다

// 위 예제에서 person 변수는 객체 {name: 'Lee'}를 가리키고(참조하고) 있다. 

// 객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다.
// 즉, 재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을 갱신할 수도 있으며 프로퍼티 자체를 삭제할 수도 있다. 

var person = {
  name: 'Lee'
};
// 프로퍼티 값 갱신
person.name = 'Kim';
// 프로퍼티 동적 생성
person.address = 'Seoul';

console.log(person); // {name: 'Kim', address: 'Seoul'}

// 객체는 변경 가능한 값이므로 메모리에 저장된 객체를 직접 수정할 수 있다
// 객체를 할당한 변수에 재할당을 하지 않았으므로 객체를 할당한 변수의 참조 값은 변경되지 않는다

// 객체를 생성하고 관리하는 방식은 매우 복잡하고 비용이 많이 드는 일이기 때문에 
// 메모리를 효율적으로 사용하기 위해, 객체를 복사해 생성하는 비용을 절약하여 성능을 향상시키기 위해 객체는 변경 가능한 값으로 설계되어있다.
// 하지만 객체는 원시 값과는 다르게 여러개의 식별자가 하나의 객체를 공유할 수 있다.

// 📌 11.2.2 참조에 의한 전달
// 여러 개의 식별자가 하나의 객체를 공유할 수 있다는 것이 무슨 의미일까?

var person = {
  name: 'Lee'
};
// 참조 값을 복사(얕은 복사)
var copy = person;

// 객체를 가리키는 변수(원본, person)을 다른 변수(사본, copy)에 할당하면 원본의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달이라 한다. 

// 원본 person과 사본 copy는 저장된 메모리 주소는 다르지만 동일한 참조 값을 갖는다.
// = 원본 person과 사본 copy 모두 동일한 객체를 가리킨다
// = 두 개의 식별자가 하나의 객체를 공유한다 
// -> 원본 또는 사본 중 어느 한쪽에서 객체를 변경하면 서로 영향을 주고받는다.

var person = {
  name: 'Lee'
};
// 참조 값을 복사(얕은 복사)
var copy = person;

// copy와 person은 동일한 객체를 참조한다
console.log(copy === person); // true

copy.name = 'Kim';
person.address = 'Seoul';

console.log(person); // {name: 'Kim', address: 'Seoul'}
console.log(copy); // {name: 'Kim', address: 'Seoul'}

// "값에 의한 전달"과 "참조에 의한 전달"은 식별자가 기억하는 메모리 공간에 저장되어 있는 값을 복사해서 전달한다는 면에서 동일하다.
// 따라서 자바스크립트에는 "참조에 의한 전달"은 존재하지 않고 "값에 의한 전달"만이 존재한다고 말할 수 있다.
// 이 책에서는 전달되는 값의 종류가 원시 값인지 구별해서 강조하는 의미에서 "값에 의한 전달"과 "참조에 의한 전달"로 구분하여 부르기로 한다.

var person1 = {
  name: 'Lee'
};
var person2 = {
  name: 'Lee'
};
// === 일치 비교 연산자는 변수에 저장되어 있는 값을 타입 변환 하지 않고 비교한다.
// 객체 리터럴은 평가될 때마다 객체를 생성한다. 
// 따라서 person1과 person2가 가리키는 객체는 내용은 같지만 다른 메모리에 저장된 별개의 객체다.
// 즉, person1과 person2의 참조 값은 전혀 다른 값이다.
console.log(person1 === person2); // false

// person1.name과 person2.name은 모두 값으로 평가될 수 있는 표현식이다. 
// 두 표현식 모두 원시 값 'Lee'로 평가된다.
console.log(person1.name === person2.name); // true