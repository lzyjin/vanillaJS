// 24장 클로저

// 클로저는 자바스크립트 고유의 개념이 아니다.
// 함수를 일급 객체로 취급하는 함수형 프로그래밍 언어(하스켈, 리스프, 얼랭, 스칼라..)에서 사용되는 중요한 특성이다.

// 클로저는 자바스크립트 고유의 개념이 아니므로 클로저의 정의가 ECMAScript 사양에 등장하지 않는다.
// MDN에서는 클로저에 대해 다음과 같이 정의하고 있다.

// "A closure is the combination of a function and the lexical environmation within which that function was declared."
// 클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다.

// 예제를 통해 정의의 의미부터 살펴보자.
// 위 정의에서 먼저 이해해야 할 핵심 키워드는 "함수가 선언된 렉시컬 환경"이다.
{
  const x = 1;
  
  function outerFunc() {
    const x = 10;

    function innerFunc() {
      console.log(x);
    }
    innerFunc();
  }
  outerFunc(); // 10
}
// outerFunc 함수 내부에서 중첩 함수 innerFunc가 정의되고 호출되었다.
// 이때 중첩 함수 innerFunc의 상위 스코프는 외부 함수 outerFunc의 스코프다.
// 따라서 중첩 함수 innerFunc 내부에서 자신을 포함하고 있는 외부 함수 outerFunc의 x 변수에 접근할 수 있다.

// 만약 innerFunc 함수가 outerFunc 함수의 내부에서 정의된 중첩 함수가 아니라면 innerFunc 함수를 outerFunc 함수의 내부에서 호출한다 하더라도 outerFunc 함수의 변수에 접근할 수 없다.
{
  const x = 1;

  function outerFunc() {
    const x = 10;
    innerFunc();
  }

  function innerFunc( ) { 
    console.log(x);
  }

  outerFunc(); // 1
}
// 이 같은 현상이 발생하는 이유는 자바스크립트가 렉시컬 스코프를 따르는 프로그래밍 언어이기 때문이다.

// 자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다. 이를 렉시컬 스코프(정적 스코프)라 한다.
{
  const x = 1;

  function foo() { 
    const x = 10;
    bar();
  }

  function bar() { 
    console.log(x);
  }

  foo(); // 1
  bar(); // 1
}
// 위 예제의 foo 함수와 bar 함수는 모두 전역에서 정의된 전역 함수다.
// 함수의 상위 스코프는 함수를 어디서 정의했느냐에 따라 결정되므로 foo 함수와 bar 함수의 상위 스코프는 전역이다.
// 함수를 어디서 호출하는지는 함수의 상위 스코프 결정에 어떠한 영향도 주지 못한다.
// 즉, 함수의 상위 스코프는 함수를 정의한 위치에 의해 정적으로 결정되고 변하지 않는다.

// 스코프의 실체는 실행 컨텍스트의 렉시컬 환경이다.
// 이 렉시컬 환경은 자신의 "외부 렉시컬 환경에 대한 참조Outer Lexical Environment Reference"를 통해 상위 렉시컬 환경과 연관된다.
// 이것이 바로 스코프 체인이다. 

// 따라서 "함수의 상위 스코프를 결정한다"는 것은 "렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값을 결정한다"는 것과 같다.
// 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값이 바로 상위 렉시컬 환경에 대한 참조이며, 이것이 상위 스코프이기 때문이다.
// 이 개념을 반영해서 다시 한번 렉시컬 스코프를 정의해 보면 다음과 같다.

// 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다.
// 이것이 바로 렉시컬 스코프다.

// 👉 24.2 함수 객체의 내부 슬롯 [[Environment]]
// 함수가 정의된 환경(위치)과 호출되는 환경(위치)은 다를 수 있다.
// 따라서 렉시컬 스코프가 가능하려면 함수는 자신이 호출되는 환경과는 상관없이 자신이 정의된 환경, 즉 상위 스코프(함수 정의가 위치하는 스코프가 바로 상위 스코프다)를 기억해야한다.
// 이를 위해 함수는 자신의 내부 슬롯[[Environment]]에 자신이 정의된 환경, 즉 상위 스코프의 참조를 저장한다.

// 다시 말해, 함수 정의가 평가되어 함수 객체를 생성할 때 자신이 정의된 환경(위치)에 의해 결정된 상위 스코프의 참조를 함수 객체 자신의 내부 슬롯 [[Environment]]에 저장한다.
// 이때 자신의 내부 슬롯 [[Environment]]에 저장된 상위 스코프의 참조는 현재 실행중인 실행 컨텍스트의 렉시컬 환경을 가리킨다.

// 왜냐하면 함수 정의가 평가되어 함수 객체를 생성하는 시점은 함수가 정의된 환경, 즉 상위 함수(또는 전역 코드)가 평가 또는 실행되고 있는 시점이며, 이때 현재 실행중인 실행 컨텍스트는 상위 함수(또는 전역 코드)의 실행 컨텍스트이기 때문이다. 

// 예를 들어, 전역에서 정의된 함수 선언문은 전역 코드가 평가되는 시점에 평가되어 함수 객체를 생성한다.
// 이때 생성된 함수 객체의 내부 슬롯 [[Environment]]에는 함수 정의가 평가되는 시점, 즉 전역 코드 평가 시점에 실행중인 실행 컨텍스트의 렉시컬 환경인 전역 렉시컬 환경의 참조가 저장된다.

// 함수 내부에서 정의된 함수 표현식은 외부 함수 코드가 실행되는 시점에 평가되어 함수 객체를 생성한다.
// 이때 생성된 함수 객체의 내부 슬롯[[Environment]에는 함수 정의가 평가되는 시점, 즉 외부 함수 코드 실행시점에 실행 중인 실행 컨텍스트의 렉시컬 환경인 외부 함수 렉시컬 환경의 참조가 저장된다.

// ❕ 따라서 함수 객체의 내부 슬롯 [[Environment]]에 저장된 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 바로 상위 스코프다.
// 또한 자신이 호출되었을 때 생성될 함수 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장될 참조값이다. 
// 함수 객체는 내부 슬롯 [[Environment]]에 저장한 렉시컬 환경의 참조, 즉 상위 스코프를 자신이 존재하는 한 기억한다.