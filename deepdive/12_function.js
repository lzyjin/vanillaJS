// 12장 함수

// 수학에서의 함수를 자바스크립트의 함수로 표현해보면 다음과 같다

// f(x, y) = x + y
function add(x, y) {
  return x + y;
}
// f(2, 5) = 7
add(2, 5); // 7

// 프로그래밍 언어의 함수는 일련의 과정을 문(statement)로 구현하고 코드 블럭으로 감싸서 하나의 실행 단위로 정의한 것이다.

// 프로그래밍 언어의 함수도 입력을 받아서 출력을 내보낸다
// 이때 함수 내부로 입력을 전달받는 변수를 매개변수(parameter), 입력을 인수(argument), 출력을 반환값(return value)이라 한다.

// 함수는 함수 정의(function definition)를 통해 생성한다
// 함수 정의
function add(x, y) {
  return x + y;
}

// 함수 정의만으로는 함수가 실행되는 것은 아니다.
// 입력 및 인수를 매개변수를 통해 함수에 전달하면서 함수의 실해을 명시적으로 지시해야 한다.
// 이를 함수 호출(function call)이라 한다. 
// 함수를 호출하면 코드 블록에 담긴 문들이 일괄적으로 실행되고 실행 결과, 즉 반환값을 반환한다.

// 함수 호출
var result = add(2, 5);

// 함수 add에 인수 2, 5를 전달하면서 호출하면 반환값 7을 반환한다
console.log(result); // 7

// 👉 12.2 함수를 사용하는 이유
// 함수는 필요할 때 여러 번 호출할 수 있다.
// 즉 실행 시점을 개발자가 결정할 수 있고 몇 번이든 재사용할 수 있다.
// 동일한 작업을 반복적으로 수행해야 한다면 같은 코드를 여러 번 작성하는 것이 아니라 미리 정의한 함수를 사용하는게 효율적이다. 

// 함수를 사용하지 않고 같은 코드를 중복해서 여러 번 작성하면 그 코드를 수정해야할 때 중복된 횟수만큼 코드를 수정해야한다
// -> 수정에 걸리는 시간이 증가한다
// -> 실수할 가능성도 높아진다
// 함수를 사용하면 유지보수의 편리성이 높아지고, 코드의 신뢰성을 높일 수 있다

// 함수는 객체 타입의 값이라서 이름을 붙일 수 있다. 
// 함수 이름은 함수의 역할을 잘 설명해야한다.
// 이는 코드의 가독성을 향상시킨다.

// 👉 12.3 함수 리터럴
// 자바스크립트의 함수는 객체 타입의 값이다.
// 함수도 함수 리터럴로 생성할 수 있다
// 함수 리터럴은 function 키워드, 함수 이름, 매개변수 목록, 함수 몸체로 구성된다
var f = function add(x, y) {
  return x + y;
};

// 함수 이름
// - 함수 이름은 식별자라서 식별자 네이밍 규칙을 준수해야한다
// - 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자다.
// - 함수 이름은 생략할 수 있다. 이름이 있는 함수를 기명 함수(named function), 이름이 없는 함수를 무명/익명 함수(anoymous function)라 한다.

// 매개변수 목록
// - 0개 이상의 매개변수를 소괄호로 감싸고 쉼표로 구분한다
// 각 매개변수에는 함수를 호출할 때 지정한 인수가 순서대로 할당된다. 즉, 매개변수 목록은 순서에 의미가 있다.
// 매개변수는 함수 몸체 내에서 변수와 동일하게 취급된다. 따라서 매개변수도 식별자 네이밍 규칙을 준수해야한다.

// 함수 몸체 
// 함수가 호출되었을 때 일괄적으로 실행할 문들을 하나의 실행 단위로 정의한 코드 블럭이다.
// 함수 몸체는 함수 호출에 의해 실행된다. 

// 함수는 호출할 수 있는 객체이다.
// 함수가 객체라는 사실은 다른 프로그래밍 언어와 구별되는 자바스크립트의 중요한 특징이다.

// 👉 12.4 함수 정의
// 함수 정의란?
// 함수를 호출하기 이전에 인수를 전달받을 매개변수와 실행할 문들, 그리고 반환할 값을 지정하는 것을 말한다.
// 정의된 함수는 자바스크립트 엔진에 의해 평가되어 함수 객체가 된다.

// 함수를 정의하는 방법 4가지
// 1. 함수 선언문
function add(x, y) {
  return x + y;
}
// 2. 함수 표현식
var add = function (x, y) {
  return x + y;
};
// 3. Fuction 생성자 함수
var add = new Function('x', 'y', 'return x + y');
// 4. 화살표 함수(ES6)
var add = (x, y) => x + y;

// 📌 12.4.1 함수 선언문
// 함수 선언문은 함수 리터럴과 형태가 동일하지만, 
// 함수 리터럴과 다르게 함수 이름을 생략할 수 없다.
// function (x, y) {
//   return x + y;
// }
// Uncaught SyntaxError: Function statements require a function name

// 함수 선언문은 표현식이 아닌 문이다.
// 크롬 개발자 도구의 콘솔에서 함수 선언문을 실행하면 undefined가 출력된다.

// 표현식이 아닌 문은 변수에 할당할 수 없다.
// 함수 선언문도 표현식이 아닌 문이므로 변수에 할당할 수 없다. 
var add = function add(x, y) {
  return x + y;
};
console.log(add(2, 5)); // 7
// 하지만 위의 예제를 실행해보면 함수 선언문이 변수에 할당되는 것처럼 보인다.

// {}는 블록문일 수도 있고, 객체 리터럴일 수도 있다. 
// {}가 단독으로 존재하면 자바스크립트 엔진은 블록문으로 해석한다. 
// 하지만 {}가 값으로 평가되어야 할 문맥에서 피연산자로 사용되면 자바스크립트 엔진은 객체 리터럴로 해석한다. 

// 기명 함수 리터럴도 중의적인 코드다.
// 자바스크립트 엔진은 함수 이름이 있는 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석하고, 
// 함수 리터럴이 값으로 평가되어야 하는 문맥(변수에 할당하거나, 피연산자로 사용)에서는 함수 리터럴 표현식으로 해석한다.

// 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석된다
// 함수 선언문에서는 함수 이름을 생략할 수 없다.
function foo() {
  console.log('foo');
}
foo(); // foo


// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석된다.
// 함수 리터럴에서는 함수 이름을 생략할 수 있다. 

// 그룹 연산자 () 내에 있는 함수 리터럴은 함수 선언문으로 해석되지 않고 함수 리터럴 표현식으로 해석된다.
// 그룹 연산자의 피연산자는 값으로 평가될 수 있는 표현식이어야 한다.
// 따라서 표현식이 아닌 문인 함수 선언문은 피연산자로 사용할 수 없다
// -> 에러
(
  function bar() {
    console.log('bar');
  }
);
// bar(); // 12_function.js:131 Uncaught ReferenceError: bar is not defined


// 함수 선언문과 함수 리터럴 표현식은 함수 객체를 생성한다는 점에서 동일하지만 호출에 차이가 있다.
// 함수 선언문에서 생성된 foo는 호출할 수 있으나 함수 리터럴 표현식으로 생성된 bar는 호출할 수 없다. 
// 그 이유는 뭘까?

// 함수 리터럴에서 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자다 라고 했다. 
// 함수 몸체 외부에서는 함수 이름으로 함수를 참조할 수 없으므로 함수 몸체 외부에서는 함수 이름으로 함수를 호출할 수 없다는 의미이다.
// = 함수를 가리키는 식별자가 없다.
// -> 위 예제의 bar 함수는 호출할 수 없다
// 그러면 함수 선언문으로 정의된 함수는 왜 foo라는 이름으로 호출할 수 있었을까?

// foo는 함수 몸체 내부에서만 유효한 식별자인 함수 이름이므로 foo로 함수를 호출할 수 없어야 한다.
// foo라는 이름으로 함수를 호출하려면 foo는 함수 이름이 아니라 함수 객체를 가리키는 식별자여야한다. 
// 예제에서는 식별자 foo를 선언한 적도 할당한 적도 없다. 
// foo는 도대체 무엇일까?

// 자바스크립트 엔진은 함수 선언문을 해석해서 함수 객체를 생성한다.
// ❕자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당한다.


// 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.
//  식별자         함수 이름
var add = function add(x, y) {
  return x + y;
};
//         식별자
console.log(add(2, 5)); // 7

// 📌 12.4.2 함수 표현식
// 자바스크립트의 함수는 객체 타입의 값이다.
// 값의 성질을 갖는 객체를 일급 객체(first-class object)라 한다
// 함수를 값처럼 자유롭게 사용할 수 있다.
// 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다
// 이러한 함수 정의 방식을 함수 표현식(function expression)이라 한다. 
var add = function (x, y) {
  return x + y;
};
console.log(add(2, 5));

// 함수 리터럴의 함수 이름은 생략할 수 있다.
// 이러한 함수를 익명 함수라 한다.
// 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다. 

// 함수를 호출할 때는 함수 이름이 아니라 함수 객체를 가리키는 식별자를 사용해야 한다.
var add = function foo222(x, y) {
  return x + y;
};
// 함수 객체를 가리키는 식별자로 호출
console.log( add(10, 20) ); // 30

// 함수 이름으로 호출하면 ReferenceError가 발생한다
// 함수 이름은 함수 몸체 내부에서만 유효한 식별자다.
// console.log( foo222(10, 20) ); // Uncaught ReferenceError: foo222 is not defined

// 자바스크립트 엔진은 함수 선언문의 함수 이름으로 식별자를 암묵적으로 생성하고, 생성된 함수 객체를 할당하므로 함수 표현식과 유사하게 동작하는 것처럼 보인다. 
// 하지만 함수 선언문과 함수 표현식이 정확히 동일하게 동작하지는 않는다.
// 함수 선언문은 "표현식이 아닌 문", 함수 표현식은 "표현식인 문"이다. 

console.clear();

// 📌 12.4.3 함수 생성 시점과 함수 호이스팅
// 함수 참조
console.dir(add2); // f add2(x, y)
console.dir(sub2); // undefined

// 함수 호출
console.log(add2(5, 7)); // 12
// console.log(sub2(5, 7)); // Uncaught TypeError: sub2 is not a function

// 함수 선언문
function add2(x, y) {
  return x + y;
}

// 함수 표현식
var sub2 = function (x, y) {
  return x - y;
};

// ❕ 위 예제와 같이 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.
// 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다.
// 이는 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문이다.

// 모든 선언문이 그렇듯 함수 선언문도 코드가 한 줄씩 실행되는 시점인 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다. 
// = 런타임 이전에 함수 객체가 먼저 생성된다. 그리고 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 생성된 함수 객체를 할당한다. 

// = 런타임에는 이미 함수 객체가 생성되어 있고 함수 이름과 동일한 식별자에 할당까지 완료된 상태다. 
// -> 함수 선언문 이전에 함수를 참조할 수 있으며 호출할 수도 있다. 
// 이처럼 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅(function hoisting)이라 한다. 

// ❕ 함수 표현식은 변수에 할당되는 값이 함수 리터럴인 문이다. 
// 따라서 함수 표현식은 변수 선언문과 변수 할당문을 한 번에 기술한 축약 표현과 동일하게 동작한다. 
// 변수 선언은 런타임 이전에 실행되어 undefined으로 초기화되지만, 변수 할당문의 값은 할당문이 실행되는 시점인 런타임에 평가되므로, 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다. 
// 따라서 함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.

// 함수 표현식 이전에 함수를 참조하면 undefined로 평가된다.
// 따라서 이때 함수를 호출하면 undefined를 호출하는 것과 마찬가지이므로 타입 에러가 발생한다
// ❕따라서 함수 표현식으로 정의한 함수는 반드시 함수 표현식 이후에 참조 또는 호출해야 한다.

// 함수 호이스팅은 함수를 호출하기 전에 반드시 함수를 선언해야 한다는 당연한 규칙을 무시한다. 
// ❕이같은 문제 때문에 JSON을 창안한 더글라스 크락포는 함수 선언문 대신에 함수 표현식을 사용할 것을 권장한다.

// 📌 12.4.4 Function 생성자 함수
// 자바스크립트가 기본 제공하는 빌트인 함수인 Function 생성자 함수에 매개변수 목록과 함수 몸체를 문자열로 전달하면서 new 연산자와 함께 호출하면 함수 객체를 생성해서 반환한다
var add = new Function('x', 'y', 'return x + y');
console.log( add(100, 300) ); // 400

// ❕ Functinon 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며 바람직하지도 않다
// Functinon 생성자 함수로 생성한 함수는 클로저를 생성하지 않는 등, 함수 선언문이나 함수 표현식으로 생성한 함수와 다르게 동작한다.
var add1 = ( function() {
  var a = 10;
  return function(x, y) {
    return x + y + a;
  };
}() );
console.log( add1(100, 200) ); // 310

var add2 = ( function() {
  var a = 10;
  return new Function('x', 'y', 'return x + y + a');
}() );
// console.log( add2(100, 200) ); // ReferenceError: a is not defined

// 📌 12.4.5 화살표함수
// ES6에서 도입된 화살표 함수(arrow function)는 function 키워드 대신 화살표 => 를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다
// 화살표 함수는 항상 익명 함수로 정의한다
const add3 = (x, y) => x + y;
console.log(add3(5, 7)); // 12

// 화살표 함수는 기존의 함수 선언문 또는 함수 표현식을 완전히 대체하기 위해 디자인된 것은 아니다. 
// 화살표 함수는 기존의 함수보다 표현 뿐만 아니라 내부 동작도 간략화되어 있다.
// 화살표 함수는 생성자 함수로 사용할 수 없으며, 기존 함수와 this 바인딩이 다르고, prototype 프로퍼티가 없으며, arguments 객체를 생성하지 않는다.

// 👉 12.5 함수 호출
// 함수는 함수를 가리키는 식별자와 한 쌍의 소괄호인 함수 호출 연산자로 호출한다.
// 함수 호출 연산자 내에는 0개 이상의 인수를 쉼표로 구분해서 나열한다. 
// 함수를 호출하면 실행 흐름을 중단하고 호출된 함수로 실행 흐름을 옮긴다. 
// 이때 매개변수에 인수가 순서대로 할당되고 함수 몸체의 문들이 실행되기 시작한다. 

// 📌 12.5.1 매개변수와 인수
// 함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우, 
// 매개변수(parameter(인자))를 통해 인수(argument)를 전달한다.
// 인수는 값으로 평가될 수 있는 표현식이어야 한다.
// 인수는 함수를 호출할 때 지정하며, 개수와 타입에 제한이 없다.

// 함수 선언문
function add(x, y) {
  return x + y;
}
// 함수 호출
// 인수 1과 2가 매개변수 x와 y에 순서대로 할당되고 함수 몸체의 문들이 실행된다.
var result = add(1, 2);

// 매개변수는 함수를 정의할 때 선언하며, 함수 몸체 내부에서 변수와 동일하게 취급된다.
// 즉, 함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 생성되고 일반 변수와 마찬가지로 undefined로 초기화된 이후 인수가 순서대로 할당된다. 
// 함수가 호출될 때마다 매개변수는 이와 같은 단계를 거친다. 

// 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수 없다.
// 즉 매개변수의 스코프(유효 범위)는 함수 내부다.
function add4(x, y) {
  console.log(x, y);
  return x + y;
}
add4(3, 4); // 3 4
// console.log(x, y); // ReferenceError: x is not defined

function add5(x, y) {
  console.log(x, y);
  return x + y;
}
add5(10); // 10 undefined

// 매개변수보다 인수가 더 많은 경우 초과된 인수는 무시된다
function add6(x, y) {
  console.log(x, y);
  return x + y;
}
add6(1, 2, 3); // 1 2

// 초과된 인수는 그냥 버려지는게 아니다.
// 모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다.
function add7(x, y) {
  console.log(arguments);
  return x + y;
}
add7(1, 2, 3); // Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]

// arguments 객체는 함수를 정의할 때 매개변수 개수를 확정할 수 없는 가변 인자 함수를 구현할 때 유용하게 사용된다.

// 📌 12.5.2 인수 확인
function add8(x, y) {
  return x + y;
}
// 위 함수는 코드상으로는 어떤 타입의 인수를 전달해야 하는지, 어떤 타입의 값을 반환하는지 명확하지 않다.
console.log( add8(2) );        // NaN
console.log( add8('a', 'b') ); // 'ab'

// 자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 확인하지 않는다.
// 자바스크립트는 동적 타입 언어다. 따라서 자바스크립트 함수는 매개변수의 타입을 사전에 지정할 수 없다.
// 따라서 자바스크립트의 경우 함수를 정의할 때 적절한 인수가 전달되었는지 확인할 필요가 있다.
function add9(x, y) {
  if( typeof x !== 'number' || typeof y !== 'number' ) {
    throw new TypeError('인수는 모두 숫자 값이어야 합니다.');
  }
  return x + y;
}
// console.log( add9(2) ); // TypeError: 인수는 모두 숫자 값이어야 합니다.
// console.log( add9('a', 'b') ); // TypeError: 인수는 모두 숫자 값이어야 합니다.

// 이처럼 함수 내부에서 적절한 인수가 전달되었는지 확인하더라도, 부적절한 호출을 사전에 방지할 수는 없고, 에러는 런타임에 발생하게 된다.
// arguments 객체를 통해 인수 개수를 확인할 수도 있다.

// 내가 써본 예제
function add10(x, y) {
  if( arguments.length !== 2) {
    throw new TypeError('인수는 2개여야 합니다.');
  }
  return x + y;
}
// add10(1, 2, 3); // TypeError: 인수는 2개여야 합니다.

// 인수가 전달되지 않은 경우 단축 평가를 사용해 매개변수에 기본값을 할당하는 방법도 있다.
function add11(a, b, c) {
  a = a || 0; // a가 falsy값이면 0을 반환함, truthy값이면 a를 반환함.
  b = b || 0;
  c = c || 0;
  return a + b + c;
}
console.log( add11(1, 2, 3) ); // 6
console.log( add11(1, 2) ); // 3
console.log( add11(1) ); // 1
console.log( add11() ); // 0

// ES6에서 도입된 매개변수 기본값을 사용하면 함수 내에서 수행하던 인수 체크 및 초기화를 간소화할 수 있다.
// 매개변수 기본값은 매개변수에 인수를 전달하지 않았을 경우와 undefined를 전달한 경우에만 유효하다.
function add12(a = 0, b = 0, c = 100) {
  return a + b + c;
}
console.log( add12(1, 2, 3) ); // 6
console.log( add12(1, 2) ); // 103
console.log( add12(1) ); // 101
console.log( add12() ); // 100

// 📌 12.5.3 매개변수의 최대 개수
// ECMAScript 사양에서는 매개변수의 최대 개수에 대해 명시적으로 제한하고 있지 않다.
// 하지만 물리적 한계는 있으므로 자바스크립트 엔진마다 매개변수의 최대 개수에 대한 제한이 있겠지만 충분히 많은 매개변수를 지정할 수 있다.
// 그렇다면 매개변수는 최대 몇개까지 사용하는 것이 좋을까?

// 매개변수는 순서에 의미가 있다.
// 따라서 매개변수가 많아지면 함수를 호출할 때 전달해야 할 인수의 순서를 고려해야한다.
// 이는 함수의 사용법을 이해하기 어렵게 만들고 실수를 발생시킬 가능성을 높인다.

// 함수의 매개변수는 코드를 이해하는 데 방해되는 요소이므로 이상적인 매개변수 개수는 0개이며 적을수록 좋다.
// 매개변수의 개수가 많다는 것은 함수가 여러가지 일을 한다는 증거이므로 바람직하지 않다. 
// 이상적인 함수는 한가지 일만 해야하며 가급적 작게 만들어야 한다.

// 따라서 매개변수는 최대 3개 이상을 넘지 않을 것을 권장한다.
// 만약 그 이상의 매개변수가 필요하다면 하나의 매개변수를 선언하고 객체를 인수로 전달하는 것이 유리하다.
// $.ajax({
//   method: 'POST',
//   url: '/user',
//   data: { 
//     id: 1,
//     name: 'Lee'
//   },
//   cache: false
// });

// ❕ 객체를 인수로 사용하는 경우 프로퍼티 키만 정확히 지정하면 매개변수의 순서를 신경 쓰지 않아도 된다.
// 또한 명시적으로 인수의 의미를 설명하는 프로퍼티 키를 사용하게 되므로 코드의 가독성도 좋아지고 실수도 줄어드는 효과가 있다.

// 하지만 주의할 것은 !
// 함수 외부에서 함수 내부로 전달한 객체를 함수 내부에서 변경하면 함수 외부의 객체가 변경되는 부수 효과(side effect)가 발생한다는 것이다.

// 📌 12.5.4 반환문
// 함수는 return 키워드와 표현식(반환값)으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환(return)할 수 있다.
function multiply(x, y) {
  return x * y; // 반환문 
}
var result = multiply(3, 5);
console.log(result); // 15

// 함수 호출은 표현식이다.
// 함수 호출 표현식은 return 키워드가 반환한 표현식의 평가 결과, 즉 반환값으로 평가된다.

// 반환문은 두 가지 역할을 한다
// 1. 반환문은 함수의 실ㄹ행을 중단하고 함수 몸체를 빠져나간다.
//    따라서 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다.
function multiply(x, y) {
  return x * y; // 반환문
  console.log('실행되지 않는다');
}
console.log( multiply(2, 6) ); // 12

// 2. 반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다.
//    return 키워드 뒤에 반환값으로 사용할 표현식을 명시적으로 지정하지 않으면 undefined가 반환된다.
function foo() {
  return;
}
console.log( foo() ); // undefined

function foo2() {
  // 반환문 생략
}
console.log( foo2() ); // undefined

// return 키워드와 반환값으로 사용할 표현식 사이에 줄바꿈이 있으면 세미콜론 자동 삽입 기능에 의해 세미콜론이 추가되어 다음과 같이 의도치 않은 결과가 발생할 수 있다.
function multiply(x, y) {
  return 
  x * y; // 무시된다
}
console.log( multiply(4, 5) ); // undefined

// 반환문은 함수 몸체 내부에서만 사용할 수 있다.
// 전역에서 반환문을 사용하면 문법 에러(SyntaxError)가 발생한다
// return; // SyntaxError: Illegal return statement

// 👉 12.6 참조에 의한 전달과 외부 상태의 변경
// 원시 값은 값에 의한 전달(pass by value), 객체는 참조에 의한 전달(pass by reference) 방식으로 동작한다.
// 매개변수도 함수 몸체 내부에서 변수와 동일하게 취급되므로 매개변수 또한 타입에 따라 값에 의한 전달, 참조에 의한 전달 방식을 그대로 따른다.

// 함수를 호출하면서 매개변수에 값을 전달하는 방식을 값에 의한 호출(call by value), 참조에 의한 호출(call by reference)로 구별해 부르는 경우도 있다.

// 매개변수 primitive는 원시 값을 전달받고, 매개변수 obj는 객체를 전달받는다. 
function changeVal(primitive, obj) {
  primitive += 100;
  obj.name = 'kim';
}
// 외부 상태
var num = 100;
var person = { name: 'Lee' };

console.log( num ); // 100
console.log( person ); // {name: 'Lee'}

// 원시 값은 값 자체가 복사되어 전달되고, 객체는 참조 값이 복사되어 전달된다.
changeVal(num, person);

console.log( num ); // 100 원시 값은 원본이 훼손되지 않는다
console.log( person ); // {name: 'kim'} 객체는 원본이 훼손된다

// changeVal 함수는 매개변수를 통해 전달받은 원시 타입 인수와 객체 타입 인수를 함수 몸체에서 변경한다.
// 더 엄밀히 말하자면 원시 타이 인수를 전달받은 매개변수 primitive의 경우, 원시 값은 변경 불가능한 값이므로 직접 변경할 수 없기 때문에 
// 재할당을 통해 할당된 원시 값을 새로운 원시 값으로 교체했고,
// 객체 타입 인수를 전달받은 매개변수 obj의 경우, 객체는 변경 가능한 값이므로 직접 변경할 수 있기 때문에 재할당 없이 직접 할당된 객체를 변경했다.

// 이때 원시 타입 인수는 값 자체가 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 그 값을 변경(재할당을 통한 교체)해도 원본은 훼손되지 않는다.
// 객체 타입 인수는 참조값이 복사되이ㅓ 매개변수에 전달되기 때문에 함수 몸체에서 참조 값을 통해 객체를 변경할 경우 원본이 훼손된다.

// 이처럼 함수가 외부 상태를 변경하면 상태 변화를 추적하기 어려워진다.
// 이는 코드의 복잡성을 증가시키고 가독성을 해치는 원인이 된다.
// 함수 내부의 동작을 유심히 관찷지 않으면 외부 상태가 변하는지 아닌지 알기 어렵기 때문이다.

// 이러한 현상은 객체가 변경할 수 있는 값이며, 참조에 의한 전달 방식으로 동작하기 때문에 발생하는 부작용이다.
// 여러 변수가 참조에 의한 전달 방식을 통해 차몾 값을 공유하고 있다면 이 변수들은 언제든지 참조하고 있는 객체를 직접 변경할 수 있다.

// ❕ 이러한 문제의 해결 방법 중 하나는 객체를 불변 객체(immutable object)로 만들어 사용하는 것이다.
// 객체의 복사본을 새롭게 생성하는 비용은 들지만 객체를 마치 원시 값처럼 변경 불가능한 값으로 동작하게 만드는 것이다.
// 이를 통해 객체의 상태 변경을 원천봉쇄하고 객체의 상태 변경이 필요한 경우에는 객체의 방어적 복사(defensive copy)를 통해 원본 개체를 완전히 복제, 즉 깊은 복사(deep copy)를 통해 새로운 객ㅊ를 생성하고 재할당을 통해 교체한다.
// 이를 통해 외부 상태가 변경되는 부수 효과를 없앨 수 있다.

// 순수 함수: 외부 상태를 변경하지 않고 외부 상태에 의존하지도 않는 함수
// 함수형 프로그래밍: 순수 함수를 통해 부수 효과를 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이려는 프로그래밍 패러다임 

// 👉 12.7 다양한 함수의 형태 
// 📌 12.7.1 즉시 실행 함수
// 즉시 실행 함수(IIFE, Immedately Invoked Function Expression): 함수 정의와 동시에 즉시 호출되는 함수
// 즉시 실행 함수는 단 한번만 호출되며 다시 호출할 수 없다.

// 익명 즉시 실행함수
( function() {
  var a = 3;
  var b = 5;
  // return a * b;
  console.log( a * b ); // 15
}() );

// 즉시 실행 함수는 함수 이름이 없는 익명 함수르 사용하는 것이 일반적이다.
// 함수 이름이 있는 기명 즉시 실행 함수를 사용할 수도 있으나, 
// 그룹 연산자() 내의 기명함수는 함수 선언문이 아니라 함수 리터럴로 평가되며, 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수를 다시 호출할 수는 없다.

( function fooo() {
  var a = 4;
  var b = 5;
  console.log( a * b );  
} );
// fooo(); // ReferenceError: fooo is not defined

// 즉시 실햄 함수는 반드시 그룹 연산자()로 감싸야 한다
// 에러가 발생하는 이유:함수 정의가 함수 선언문의 형식에 맞지 않기 때문. 함수 선언문은 함수 이름을 생략할 수 없다.
// function() {
//   var a = 3;
//   var b = 5;
//   console.log( a * b );
// }(); // SyntaxError: Function statements require a function name

// 그렇다면 기명 함수를 정의해 그룹 연산자 없이 즉시 호출해보자.
// 에러가 발생하는 이유: 자바스크립트 엔진이 암묵적으로 수행하는 세미콜론 자동 삽입 기능에 의해 함수 선언문이 끝나는 위치(함수 코드 블록의 닫는 중괄호 뒤)에 ;가 암묵적으로 추가되기 때문
// function fooooo() {
//   // ...
// }(); // SyntaxError: Unexpected token ')'

// 위는 아래와 같다;
// function fooooo() {};();

// 따라서 함수 선언문 뒤의 ()는 함수 호출 연산자가 아니라 그룹 연산자로 해석되고, 그룹 연산자에 피연산자가 없기 때문에 에러가 발생한다.
// (); // SyntaxError: Unexpected token ')'

// 그룹연산자의 피연산자는 값으로 평가된다.
// -> 기명 또는 무명 함수를 그룹 연산자로 감싸면 함수 리터럴로 평가되어 함수 객체가 된다.
console.log( typeof (function f(){}) ); // function
console.log( typeof (function (){}) ); // function

// 그룹 연산자로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서다.
// 따라서 먼저 함수 리터럴을 평가해서 함수 객체를 생성할 수 있다면 다음과 같이 그룹 연산자 이외의 연산자를 사용해도 좋다.
// 가장 일반적인 방법은 첫 번째 방식이다.
(function () {
  // ...
}());

(function () {
  // ...
})();

!function () {
  // ...
}();

+function () {
  // ...
}();

// 즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있고, 인수를 전달할 수도 있다.
// 즉시 실행 함수의 값 반환 
var res = (
  function() {
    var a = 10;
    var b = 5;
    return a * b;
  }()
);
console.log(res); // 50

// 즉시 실행 함수의 인수 전달
res = (
  function(a, b) {
    return a * b;
  }(10, 5)
);
console.log(res); // 50   

// 즉시 실행 함수 내에 코드를 모아 두면 혹시 있을 수도 있는 변수나 함수 이륾의 충돌을 방지할 수 있다.
// -> "전역 변수의 사용을 억제하는 방법"에서 살펴봄

// 📌 12.7.2 재귀 함수
// 재귀 호출(recursive call): 함수가 자기 자신을 호출하는 것
// 재귀 함수: 재귀 호출을 하는 함수
// 재귀 함수는 반복되는 처리를 위해 사용한다.

// 10부터 1까지 출력하는 예제
function countdown(n) {
  for(var i = n; i >= 0; i-- ) {
    console.log(i);
  }
}
countdown(10);

// 반복문 없이도 재귀함수로 구현할 수 있다.
function countdown2(n) {
  if(n < 0) {
    console.log(n);
    countdown(n - 1); // 재귀 호출
  }
}
countdown2(10); 

// 자기 자신을 호출하는 재귀 함수를 사용하면 반복되는 처리를 반복문 없이 구현할 수 있다

// 재귀 함수로 팩토리얼 구현
// n! = 1 * 2 * ,,, * (n-1) * n
function factorial(n) {
  // 탈출 조건: n이 1 이하일 때 재귀 호출을 멈춘다
  if( n <= 1 ) {
    return 1; 
  }
  return n * factorial(n - 1);
}
console.log( factorial(0) ); // 1
console.log( factorial(1) ); // 1
console.log( factorial(2) ); // 2
console.log( factorial(3) ); // 1 * 2 * 3 = 6
console.log( factorial(4) ); // 1 * 2 * 3 * 4 = 24

// factorial 함수 내부에서 자기 자신을 호출할 때 사용한 식별자 factorial은 함수 이름이다.
// 함수 이름은 함수 몸체 내부에서만 유효하다
// -> 함수 내부에서 함수 이름을 사용해 자기 자신을 호출할 수 있다.

// 함수 표현식으로 정의한 함수 내부에서는 함수 이름은 물론, 함수를 가리키는 식별자로도 자기 자신을 재귀 호출할 수 있다.
// 단, 함수 외부에서 함수를 호출할 때는 반드시 함수를 가리키는 식별자로 해야 한다.

// 함수 표현식
var factorial = function foo(n) {
  if( n <= 1 ) {
    return 1;
  }
  // 함수를 가리키는 식별자로 자기 자신을 재귀 호출
  // return n * factorial(n - 1);

  console.log(factorial === foo); // true
  return n * foo(n - 1);
};
console.log(factorial(5));
// console.log(foo(5)); // undefined

// 재귀 함수는 자신을 무한 재귀 호출한다.
// 따라서 재귀 함수 내에서 재귀 호출을 멈출 수 있는 탈출 조건을 반드시 만들어야한다.
// 탈출 조건이 없으면 함수가 무한 호출되어 스택 오버플로(stack overflow) 에러가 발생한다.

// 대부분의 재귀함수는 for문이나 while문으로 구현 가능하다.
function factorial2(n) {
  if(n <= 1) {
    return 1;
  }
  var result = n;
  while(--n) {
    result *= n;
  }
  return result;
}
// console.log( factorial2(3) ); // 6
console.log( factorial2(4) ); // 24

// 재귀 함수는 반복되는 처리를 반복문 없이 구현할 수 있다는 장점이 있지만,
// 무한 반복에 빠질 위험이 있다. 이로 인해 스택 오버플로 에러를 발생시킬 수 있으므로 주의해서 사용해야한다.
// 재귀 함수는 반복문을 사용하는 것보다 재귀 함수를 사용하는 편이 더 직관적으로 이해하기 쉬울 때만 한정적으로 사용하는 것이 바람직하다.


// 📌 12.7.3 중첩 함수
// 함수 내부에 정의된 함수를 중첩 함수(nested function) 또는 내부 함수(inner function)라 한다.
// 중첩 함수를 포함하는 함수는 외부 함수(outer function)라 부른다.
// 중첩 함수는 외부 함수 내부에서만 호출할 수 있다.
// 일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다.
function outer() {
  var x = 1;

  // 중첩 함수
  function inner() {
    var y = 2;
    // 외부 함수의 변수를 참조할 수 있다.
    console.log( x + y );
  }
  
  inner();
}
outer(); // 3

// ES6부터 함수 정의는 문이 위치할 수 있는 문맥이라면 어디든지 가능하다.
// 함수 선언문의 경우 ES6 이전에는 코드의 최상위 또는 다른 함수 내부에서만 정의할 수 있었으나, ES6부터는 if문이나 for문 등의 코드 블록 내에서도 정의할 수 있다.

// 단, 호이스팅으로 인해 혼란이 발생할 수 있으므로 if문이나 for문 등의 코드 블록에서 함수 선언문을 통해 함수를 정의하는 것은 바람직하지 않다.
// 중첩 함수는 스코퍼 클로저에 깊은 관련이 있다.


// 📌 12.7.4 콜백 함수
// 함수를 정의하고, 함수 내에서 다른일을 하고 싶다면 함수를 새롭게 정의해야 한다.
// 함수의 일부분만 다르기 때문에 매번 함수를 새롭게 정의해야 한다.
// 이 문제는 함수를 합성하는 것으로 해결할 수 있다.
// 함수의 변하지 않는 공통 로직은 미리 정의해 두고, 경우에 따라 변경되는 로직은 추상화해서 함수 외부에서 함수 내부로 전달하는 것이다.
function repeat(n, f) {
  for(var i = 0; i < n; i++) {
    f(i); // i를 전달하면서 f를 호출
  }
}
var logAll = function(i) {
  console.log(i);
};
// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logAll); // 0 1 2 3 4

var logOdds = function(i) {
  if(i % 2) {
    console.log(i);
  }
};
repeat(5, logOdds); // 1 3

// 위 repeat 함수는 경우에 따라 변경되는 일을 함수 f로 추상화했고 이를 외부에서 던달받는다.
// 자바스크립트의 함수는 일급 객체이므로 함수의 매개변수를 통해 함수를 전달할 수 있다.
// repeat 함수는 더 이상 내부 로직에 강력히 의존하지 않고 외부에서 로직의 일부분을 함수로 전달받아 수행하므로 더욱 유연한 구조를 갖는다.

// 콜백 함수(callback function): 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수
// 고차 함수(HOF, high-order function): 매개변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수

// 콜백 함수도 고차 함수에 전달되어 헬퍼 함수의 역할을 한다.
// 콜백 함수는 함수 외부에서 고차 함수 내부로 주입하기 때문에 자유롭게 교체할 수 있다는 장점이 있다.
// 즉 고차 함수는 콜백 함수를 자신의 일부분으로 합성한다.

// 고차 함수는 매개변수를 통해 전달받은 콜백 함수의 호출 시점을 결정해서 호출한다.
// = 콜백 함수는 고차 함수에 의해 호출되며 이때 고차 함수는 필요에 따라 콜백 함수에 인수를 전달할 수 있다.

// 콜백 함수가 고차 함수 내부에서만 호출된다면 콜백 함수를 익명 함수 리터럴로 정의하면서 곧바로 고차 함수에 전달하는 것이 일반적이다.

// 익명 함수 리터럴을 콜백 함수로 고차 함수에 전달한다.
// 익명 함수 리터럴은 repeat 함수를 호출할 때마다 평가되어 함수 객체를 생성한다.
repeat(10, function(i) {
  if(i % 2) {
    console.log(i); // 1 3 5 7 9
  }
})

// 콜백 함수로서 전달된 함수 리터럴은 고차 함수가 호출될 때마다 평가되어 함수 객체를 생성한다.
// 콜백 함수를 다른 곳에서도 호출할 필요가 있거나, 콜백 함수를 전달받는 함수가 자주 호출된다면 함수 외부에서 콜백 함수를 정의한 후 함수 참조를 고차 함수에 전달하는 편이 효율적이다.

// logOdds 함수는 단 한번만 생성된다.
var logOdds = function(i) {
  if(i % 2) {
    console.log(i);
  }
};
repeat(5, logOdds);

// 콜백 함수는 함수형 프로그래밍 패러다임뿐만 아니라 비동기 처리(이벤트 처리, Ajax 통신, 타이머 함수 등)에 활용되는 중요한 패턴이다.
// 콜백 함수는 비동기 처리 뿐 아니라 배열 고차 함수에서도 사용된다.

// 📌 12.7.5 순수 함수와 비순수 함수
// 함수형 프로그래밍에서 순수 함수(pure function): 어떤 외부 상태에 의존하지도 변경하지도 않는, 즉 부수 효과가 없는 함수
// 비순수 함수(impure function): 외부 상태에 의존하거나 외부 상태를 변경하는, 즉 부수 효과가 있는 함수

// 순수 함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환하는 함수다.
// 순수 함수는 오직 매개변수를 통해 함수 내부로 전달된 인수에게만 의존해 반환값을 만든다.
var count = 0;
// 순수 함수
function increase(n) {
  return ++n;
}
// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경
count = increase(count);
console.log(count); // 1

count = increase(count);
console.log(count); // 2


var count2 = 0;
// 비순수 함수
// 외부 상태(count)를 변경하믈 상태 변화를 추적하기 어려워진다. 
function increase2() {
  return ++count2;
}

increase2();
console.log(count2); // 1
increase2();
console.log(count2); // 2

// 함수 내부에서 외부 상태를 직접 참조하면 외부 상태에 의존하게 되어 반환값이 변할 수 있고, 외부 상태도 변경할 수 있으므로 비순수 함수가 된다.
// 함수 내부에서 외부 상태를 직접 참조하지 않더라도 매개변수를 통해 객체를 전달받으면 비순수 함수가 된다.

// 함수가 외부 상태를 변경하면 상태 변화를 추적하기 어려워진다.
// 따라서 함수 외부 상태의 변경을 지양하는 순수 함수를 사용하는 것이 좋다.

// 함수형 프로그래밍은 순수 함수와 보조 함수의 조합을 통해 외부 상태를 변경하는 부수 효과를 최소화해서 불변성을 지향하는 프로그래밍 패러다임이다.
// = 순수 함수를 통해 부수 효과를 최대한 억제해 오류를 피하고 프로그램의 안정성을 높이려는 노력의 일환이다.
