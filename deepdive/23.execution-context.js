// 23장 실행 컨텍스트

// 실행 컨텍스트(execution context)는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.

// 👉 23.1 소스코드의 타입
// ECMA Script 사양은 소스코드(ECMA Script)를 4가지 타입으로 구분하다.

// 소스 코드의 타입 | 설명
// 전역 코드(gloal code) | 전역에 존재하는 소스코드를 말한다. 전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다.
// 함수 코드(function code) | 함수 내부에 존재하는 소스코드를 말한다. 함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다.
// eval 코드(eval code) | 빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드를 말한다.
// 모듈 코드(module code) | 모듈 내부에 존재하는 말한다. 모듈 내부의 함수, 클래스 드의 내부 코드는 포함되지 않는다.

// 소스코드(실행 가능한 코드)를 4가지 타입으로 구분하는 이유는 소스코드의 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르기 때문이다.

// 1. 전역 코드
// 전역 코드는 전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야 한다.
// 그리고 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다.
// 이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 생성된다.

// 2. 함수 코드
// 함수 코드는 지역 스코프를 생성하고 지역 변수, 매개변수, arguments 객체로 관리해야 한다.
// 그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다.
// 이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 생성된다.

// 3. eval 코드
// eval 코드는 strict mode에서 자신만의 독자적인 스코프를 생성한다.
// 이를 위해 eval 코드가 평가되면 eval 실행 컨텍스트가 생성된다.

// 4. 모듈 코드
// 모듈 코드는 모듈별로 독립적인 모듈 스코프를 생성한다.
// 이를 위해 모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성된다.

// 👉 23.2 소스코드의 평가와 실행
// 모든 소스코드는 실행에 앞서 평가 과정을 거치며 코드를 실행하기 위한 준비를 한다.
// 다시 말해, 자바스크립트 엔진은 소스코드를 2개의 과정, 즉 "소스 코드의 평가"와 "소스 코드의 실행" 과정으로 나누어 처리한다.

// 소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언문과 먼저 실행하여 생성된 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록한다.
// 소스코드 평가 과정이 끝나면 비로소 선언문을 제외한 소스코드가 순차적으로 실행되기 시작한다.
// 즉, 런타임이 시작된다.
// 이때 소스코드 실행에 필요한 정보, 즉 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다.
// 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다.

{
  var x;
  x = 1;
}
// 자바스크립트 엔진은 위 예제를 2개의 과정으로 나누어 처리한다.
// 먼저 소스코드 평가 과정에서 변수 선언문 var x;를 먼저 실행한다.
// 이때 생성된 변수 식별자 x는 실행 컨텍스트가 관리하는 스코프에 등록되고 undefined로 초기화된다.

// 소스코드 평가 과정이 끝나면 비로소 소스코드 실행 과정이 시작된다.
// 변수 선언문 var x;는 소스코드 평가 과정에서 이미 실행이 완료되었다.
// 따라서 소스코드 실행 과정에서는 변수 할당문 x = 1;만 실행된다.
// 이때 x 변수에 값을 할당하려면 먼저 x 변수가 선언된 변수인지 확인해야 한다.

// 이를 위해 실행 컨텍스트가 관리하는 스코프에 x변수가 등록되어 있는지 확인한다.
// 다시말해, x 변수가 선언된 변수인지 확인한다.
// 만약 x 변수가 실행 컨텍스트가 관리하는 스코프에 등록되어 있다면 x 변수는 선언된 변수, 즉 소스코드 평가 과정에서 선언문이 실행되어 등록된 변수다.
// x 변수가 선언된 변수라면 값을 할당하고 할당 결과를 실행 컨텍스트에 등록하여 관리한다.

// 23.3 실행 컨텍스트의 역할
{
  // 전역 변수 선언
  const x = 1;
  const y = 2;

  // 함수 정의
  function foo(a) {
    // 지역 변수 선언
    const x = 10;
    const y = 20;

    // 메서드 호출
    console.log( a + x + y );
  }

  // 함수 호출
  foo(100);

  // 메서드 호출
  console.log( x + y );
}
// 1. 전역 코드 평가
// 전역 코드를 실행하기에 앞서 먼저 전역 코드 평가 과정을 거치며 전역 코드를 실행하기 위한 준비를 한다.
// 소스코드 평가 과정에서는 선언문만 먼저 실행한다.
// 따라서 전역 코드의 변수 선언문과 함수 선언문이 먼저 실행되고, 그 결과 생성된 전역 변수와 전역 함수가 실행 컨텍스트가 관리하는 전역 스코프에 등록된다.
// 이때 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수는 정녁 개체의 플퍼티와 메서드가 된다.

// 2. 전역 코드 실행
// 전역 코드 평가 과정이 끝나면 런타임이 시작되어 전역 코드가 순차적으로 실행되기 시작한다.
// 이때 전역 변수에 값이 할당되고 함수가 호출된다.
// 함수가 호출되면 순차적으로 실행되던 전역 코드의 실행을 일시 중단하고 코드 실행 순서를 변경하여 함수 내부로 진입한다.

// 3. 함수 코드 평가
// 함수 호출에 의해 코드 실행 순서가 변경되어 함수 내부로 진입하면 함수 내부의 문들을 실행하기에 앞서 함수 코드 평가 과정을 거치며 함수 코드를 실행하기 위한 준비를 한다.
// 이때 매개변수와 지역 변수 선언문이 먼저 실행되고, 그 결과 생성된 매개변수와 지역 변수가 실행 컨텍스트가 관리하는 지역 스코프에 등록된다.
// 또한 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.

// 4. 함수 코드 실행
// 함수 코드 평가 과정이 끝나면 런타임이 시작되어 함수 코드가 순차적으로 실행되기 시작한다.
// 이때 매개변수와 지역 변수에 값이 할당되고 console.log 메서드가 호출된다.

// console.log 메서드를 호출하기 위해 먼저 식별자인 console을 스코프 체인을 통해 검색한다.
// 이를 위해 함수 코드의 지역 스코프는 상위 스코프인 전역 스코프와 연결되어야 한다.
// 하지만 console 식별자는 스코프 체인에 등록되어 있지 않고 전역 객체에 프로퍼티로 존재한다.
// 이는 전역 객체의 프로퍼티가 마치 전역 변수처럼 전역 스코프를 통해 검색 가능해야 한다는 것을 의미한다.

// 다음은 log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색한다.
// 그후 console.log 메서드에 인수로 전달된 표현식 a + z + y가 평가된다.
// a, x, y 식별자는 스코프 체인을 통해 검색한다.
// console.log 메서드의 실행이 종료되면 함수 코드 실행 과정이 종료되고 함수 호출 이전으로 되돌아가 전역 코드 실행을 계속한다.

// 이처럼 코드가 실행되려면 스코프를 구분하여 식별자와 바인딩된 값이 관리되어야 한다.
// 그리고 중첩 관계에 의해 스코프 체인을 형성하여 식별자를 검색할 수 있어야 하고, 전역 객체의 프로퍼티도 전역 변수처럼 검색할 수 있어야 한다.

// 또한 함수 호출이 정료되면 함수 호출 이전으로 되돌아가기 위해 현재 실행 중인 코드와 이전에 실행하던 코드를 구분하여 관리해야 한다.
// 이처럼 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.

// 1. 선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프로 구분하여 등록하고 상태 변화(식별자에 바인딩된 값의 변화)를 지속적으로 관리할 수 있어야 한다.
// 2. 스코프는 중첩 관계에의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상위 스코프로 이동하며 식별자를 검색할 수 있어야 한다.
// 3. 현재 실행 중인 코드의 실행 순서를 변경(예를 들어, 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며 다시 됟로아갈 수도 있어야 한다.

// 이 모든 것을 관리하는 것이 바로 실행 컨텍스트다.
// ❕ 실행 컨텍스트는 소스코드를 시행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.
// 좀 더 구체적으로 말해, 실행 컨텍스트는 식별자(변수, 함수, 클래스 등의 이름)를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.

// 식별자와 스코프는 실행 컨텍스트의 렉시컬 환경으로 관리하고, 코드 실행 순서는 실행 컨텍스트 스택으로 관리한다.

// 👉 23.4 실행 컨텍스트 스택
{
  const x = 1;

  function foo() {
    const y = 2;

    function bar() {
      const z = 3;
      console.log( x + y + z );
    }
    bar();
  }
  foo(); // 6
}
// 위 예제는 소스코드의 타입으로 분류할 때 전역 코드와 함수 코드로 이루어져 있다.
// 자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성한다.
// 그리고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다.

// 이때 생성된 실행 컨텍스트는 스택stack 자료구조로 관리된다.
// 이를 실행 컨텍스트 스택이라고 부른다.

// 실행컨텍스트 스택
//  ->                    -> bar 함수 실행 컨텍스트                      ->              ->
//  -> foo 함수 실행 컨텍스트 -> foo 함수 실행 컨텍스트 -> foo 함수 실행 컨텍스트 ->               ->
//  -> 전역 실행 컨텍스트     -> 전역 실행 컨텍스트     -> 전역 실행 컨텍스트     -> 전역 실행 컨텍스트 ->

// 1. 전역 코드의 평가와 실행
// 자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.
// 이때 전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록된다.
// 이후 전역 코드가 실행되기 시작하여 전역 변수x에 값이 할당되고 전역 함수 foo가 호출된다.

// 2. foo 함수 코드의 평가와 실행
// 전역 함수 foo가 호출되면 전역 코드의 실행은 일시 중단되고 코드의 제어권control이 foo 함수 내부로 이동한다.
// 자바스크립트 엔진은 foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.
// 이때 foo 함수의 지역 변수 y와 중첩 함수 bar가 foo 함수 실행 컨텍스트에 등록된다.
// 이후 foo 함수 코드가 실행되기 시작하여 지역 변수 y에 값이 할당되고 중첩 함수 bar가 호출된다.

// 3. bar 함수 코드의 평가와 실행
// 중첩 함수 bar가 호출되면 foo 함수 코드의 실행은 일시 중단되고 코드의 제어권이 bar 함수 내부로 이동한다.
// 자바스크립트 엔진은 bar 함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.
// 이때 bar 함수의 지역 변수 z가 bar 함수 실행 컨텍스트에 등록된다.
// 이후 bar 함수 코드가 실행되기 시작하여 지역  변수 z에 값이 할당되고 console.log 메서드를 호출한 이후, bar 함수는 종료된다.

// 4.foo 함수 코드로 복귀
// bar 함수가 종료되면 코드의 제어권은 다시 foo 함수로 이동한다.
// 이때 자바스크립트 엔진은 bar 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거한다.
// 그리고 foo 함수는 더 이상 실행할 코드가 없으므로 종료된다.

// 5. 전역 코드로 복귀
// foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동한다.
// 이때 자바스크립트 엔진은 foo 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거한다.
// 그리고 더 이상 실행할 전역 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 실행 컨텍스트 스택에서 팝되어 실행 컨텍스트 스택에는 아무것도 남아있지 않게 된다.

// 이처럼 실행 컨텍스트 스택은 코드의 실행 순서를 관리한다.
// 소스코드가 평가되면 실행 컨텍스트가 생성되고 실행 컨텍스트 스택의 최상위에 쌓인다.
// 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행중인 코드의 실행 컨텍스트다.
// 따라서 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 실행중인 실행 컨텍스트(running execution context)라 부른다.

// 👉 23.5 렉시컬 환경
// 렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로
// 실행 컨텍스트를 구성하는 컴포넌트다.
// 실행 컨텍스트 스택이 코드의 실행 순서를 관리한다면, 렉시컬 환경은 스코프와 식별자를 관리한다.

// https://m.cafe.daum.net/ITVillage/Q3Wg/5
// ❕ 렉시컬(lexical) 특성
// 렉시컬의 의미는 사전적으로는 '어휘'라는 의미이다.
// 자바스크립트에서는 프로그램이 구현된 '코드'와 관련되어 있음을 의미한다.
// 변수를 검색할 때 함수가 실행되는 환경을 근거로 판단하는 것이 아니라, 함수를 정의한 코드의 문맥을 근거로 판단한다는 것이다.
// = 실행시, 각 문장이 참조하는 변수는 렉시컬 환경에서 정의한, 즉 "코드 그대로의 환경"을 기준으로 정의한 변수 스코프에서 검색한다.
/*
{
  var func1 = function(){
    var a = 1;
    func2();
  };
  var func2 = function(){
    return a;
  };
  func1();
}
*/
// 위 코드에서 func1 함수를 호출하면 'a is not defined' 예외가 발생한다.
// 그 이유는 func2 함수가 호출되어 a를 반환하는데 func2 함수 내부에 정의된 a 변수가 없고, 전역 변수 스코프에도 a 변수가 없기 때문이다.
// 결론은 함수가 실행되고 있는 환경에서 a를 검색하는 것이 아니라, 각 문장이 정의된 함수 내에서 검색한다는 것이다.
{
  // --------------------- Global Lexical Environment
  const x = 1;
  function foo() {

    // ********** foo Lexical Environment
    const y = 2;
    console.log( x + y );
    // ********** foo Lexical Environment

  }
  // --------------------- Global Lexical Environment
}
// 그림 23-6 참고

// 렉시컬 환경은 키와 값을 갖는 객체 형태의 스코프(전역, 함수, 블록 스코프)를 생성하여 식별자를 키로 등록하고 식별자에 바인딩된 값을 관리한다.
// 즉, 렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.

// 실행 컨텍스트는 LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트로 구성된다.

// 생성 초기에 LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트는 하나의 동일한 렉시컬 환경을 참조한다.
// 이후 몇가지 상황을 만나면 VariableEnvironment 컴포넌트를 위한 새로운 렉시컬 환경을 생성하여 생성하고, 이때부터 VariableEnvironment 컴포넌트와 LexicalEnvironment 컴포넌트는 내용이 달라지는 경우도 있다.
// 이 책에서는 strict mode와 eval 코드, try/catch 문과 같은 특수한 상황은 제외하고, LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트도 구분하지 않고 렉시컬 환경으로 통일해 간략하게 설명하려 한다.

// 렉시컬 환경은 다음과 같이 두 개의 컴포넌트로 구성된다.
// 1. 환경 레코드 EnvironmentRecord
// - 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리한느 저장소다.
// 2. 외부 렉시컬 환경에 대한 참조 OuterLexicalEnvironmentReference
// - 외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다.
// 이때 상위 스코프란 외부 렉시컬 환경, 즉 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다.
// 외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.

// 👉 23.6 실행 컨텍스트의 생성과 식별자 검색 과정
{
  var x = 1;
  const y = 2;

  function foo(a) {
    var x = 3;
    const y = 4;

    function bar(b) {
      const z =  5;
      console.log( a + b + x + y + z );
    }
    bar(10);
  }
  foo(20); // 42
}

// 📌 23.6.1 전역 객체 생성
// 전역 객체는 전역 코드가 평가되기 이전에 생성된다.
// 이때 전역 객체에는 빌트인 전역 프로퍼티와 빌트인 전역 함수, 그리고 표준 빌트인 객체가 추가되며 동작 환경에 따라 클라이언트 사이드 Web API 또는 특정 환경을 위한 호스트 객체를 포함한다.
// 전역 객체도 Object.prototype을 상속받는다.
// 즉, 전역 객체도 프로토타입 체인의 일원이다.

Object.prototype.toString();
window.toString();

console.log( window.__proto__.__proto__.__proto__.__proto__ === Object.prototype ); // true

// 📌 23.6.2 전역 코드 평가
// 소스코드가 로드되면 자바스크립트 엔진은 전역 코드를 평가한다.
// 전역 코드 평가는 다음과 같은 순서로 진행된다
// 1) 전역 실행 컨텍스트 생성
// 2) 전역 렉시컬 환경 생성
//    2.1) 전역 환경 레코드 생성
//        2.1.1) 객체 환경 레코드 생성
//        2.1.2) 선언적 환경 레코드 생성
//    2.2) this 바인딩
//    2.3) 외부 렉시컬 환경에 대한 참조 결정

// ....

// 👉 23.7
// 실행 컨텍스트와 블록 레벨 스코프
// 15장에서 살펴보앗듯이 var키워드로 선언한 변수는 오로지 함수의 코드 블록만 지역 스코프로 인정하는 함수 레벨 스코프를 따른다.
// 하지만 let, const 키워드로 선언한 변수는 모든 코드 블록(함수,, if문, for문, while문, try/catch문 등)을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.
{
  let x = 1;
  if(true) {
    let x = 10;
    console.log(x); // 10
  }
  console.log(x); // 1
}
// if문의 코드 블록 내에서 let 키워드로 변수가 선언되었다.
// 따라서 if문의 코드 블록이 실행되면 if문의 코드 블록을 위한 블록 레벨 스코프를 생성해야 한다.
// 이를 위해 선언적 환경 레코드를 갖는 렉시컬 환경을 새롭게 생성하여 기존의 전역 렉시컬 환경을 교체한다.
// 이때 새롭게 생성된 if문의 코드블록을 위한 렉시컬 환경의 외부 렉시컬 환경에 대한 참조는 if문이 실행되기 이전의 전역 렉시컬 환경을 가리킨다.
