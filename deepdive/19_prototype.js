// 19장 프로토타입
// 자바스크립트는 명령형imperative, 함수형functional, 프로토타입 기반prototype-based, 객체지향 프로그래밍oop을 지원하는 멀티 패러다임 프로그래밍 언어다.

// - 클래스class
// ES6에서 클래스가 도입되었다. 하지만 클래스가 기존의 프로토타입 기반 객체지향 모델을 폐지하고 새로운 객체지향 모델을 제공하는 것은 아니다.
// 사실 클래스도 함수이며, 기존 프로토타입 기반 패턴의 문법적 설탕syntax sugar이라고 볼 수 있다.
// 클래스와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만, 정확히 동일하게 동작하지는 않는다.
// 클래스는 생성자 함수보다 엄격하며 클래스는 생성자 함수가 제공하지 않는 기능도 제공한다.
// 따라서 클래스를 새로운 객체 생성 메커니즘으로 보는 것이 좀 더 합당하다.

// 자바스크립트는 객체 기반의 프로그래밍 언어이며, 자바스크립트를 이루고 잇는 거의 "모든 것"이 객체다.
// 원시 타입의 값을 제외한 나머지 값들이 모두 객체다.

// 19.1 객체지향 프로그래밍
// 객체지향 프로그래밍은 전통적인 명령형 프로그래밍imperative-programming(프로그램을 명령어 또는 함수의 목록으로 보는)의 절차지향적 관점에서 벗어나 객체object(여러 개의 독립적 단위)의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임을 말한다.

// 객체지향 프로그래밍은 실세계의 실체를 인식하는 철학적 사고를 프로그래밍에 접목하려는 시도에서 시작한다.
// 실체는 특징이나 성질을 나타내는 속성attribute/property을 가지고 있고, 이를 통해 실체를 인식하거나 구별할 수 있다.
// ex) 사람- 이름,주소,성별,나이,신장,체중,학력,성격,직업... 다양한 속성을 가짐. 속성을 구체적으로 표현하면 특정한 사람을 다른 사람과 구별하여 인식할 수 있다.

// 사람에게는 다양한 속성이 있으나 우리가 구현하려는 프로그램에서는 사람의 "이름"과 "주소"라는 속성에만 관심이 있다고 가정하자.
// 이처럼 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 추상화abstaction이라 한다.

// 이름과 주소라는 속성을 갖는 person 이라는 객체를 자바스크립트로 표현하면?
// 이름과 주소 속성을 갖는 객체
const person = {
  name: 'Lee',
  address: 'Seoul'
};
console.log(person); // { address: "Seoul", name: "Lee"}

// 프로그래머는 이름과 주소 속성으로 표현된 객체object인 person을 다른 객체와 구별하여 인식할 수 있다.
// ❕이처럼 속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조를 객체라고 하며,
// 객체지향 프로그래밍은 독립적인 객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임이다.

// 원Circle이라는 개념을 객체로 만들어보자.
// 원에는 반지름이라는 속성이 있다. 반지름을 가지고 원의 지름, 둘레, 넓이를 구할 수 있다.
// 이때 반지름은 원의 상태를 나타내는 데이터이며, 원의 지름, 둘레, 넓이를 구하는 것은 동작이다.

const circle = {
  radius: 5, // 반지름

  // 원의 지름: 2r
  getDiameter() {
    return 2 * this.radius;
  },
  // 원의 둘레: 2πr
  getPerimeter() {
    return 2 * Math.PI * this.radius;
  },
  // 원의 넓이: πrr
  getArea() {
    return Math.PI * this.radius **2;
  }
};
console.log(circle); // {radius: 5, getDiameter: ƒ, getPerimeter: ƒ, getArea: ƒ}
console.log(circle.getDiameter()); // 10
console.log(circle.getPerimeter()); // 31.41592653589793
console.log(circle.getArea()); // 78.53981633974483

// 이처럼 객체지향 프로그래밍은 객체의 상태state를 나타내는 데이터와 상태 데이터르 조작할 수 있는 동작behvior을 하나의 논리적인 단위로 묶어 생각한다.
// 따라서 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라고 할 수 있다.
// 이때 객체의 상태 데이터를 프로퍼티proerty, 동작을 메서드method라 부른다.

// 각 객체는 고유의 기능을 갖는 독립적인 부품으로 볼 수 있지만, 자신의 고유한 기능을 수행하면서 다른 객체와 관계성relationship을 가질 수 있다.
// 다른 객체와 메시지를 주고받거나 데이터를 처리할 수도 있다.
// 또는 다른 객체의 상태 데이터나 동작을 상속받아 사용하기도 한다.

